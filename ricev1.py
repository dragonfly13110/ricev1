import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import os
import plotly.express as px
import plotly.graph_objects as go # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

# --- Page Configuration (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î) ---
st.set_page_config(
    page_title="üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏ß", # ‡πÄ‡∏û‡∏¥‡πà‡∏° Emoji
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.example.com/help', # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        'Report a bug': "https://www.example.com/bug", # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        'About': "# ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß\n‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ AI (Claude 3) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì!"
    }
)

# --- Inject CSS for Kanit font and minor UI tweaks ---
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;700&display=swap');
    html, body, [class*="st-"], .stButton>button, .stTextInput>div>div>input, .stDateInput>div>div>input {
        font-family: 'Kanit', sans-serif !important;
    }
    .stSelectbox div[data-baseweb="select"] > div {
        font-family: 'Kanit', sans-serif !important;
    }
    .stMultiSelect div[data-baseweb="select"] > div {
        font-family: 'Kanit', sans-serif !important;
    }
    .stRadio label span {
        font-family: 'Kanit', sans-serif !important;
    }
    /* Custom styling for expander header */
    .st-expanderHeader {
        font-size: 1.1em;
        font-weight: 500;
    }
    /* Custom styling for subheader */
    h2 { /* Streamlit's subheader renders as h2 */
        border-bottom: 2px solid #eee;
        padding-bottom: 0.3em;
    }
    </style>
""", unsafe_allow_html=True)


# --- Configuration ---
DATA_FILE = "rice_data.csv"

DISTRICTS_DATA = {
    "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤": [
        "‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏ó‡πà‡∏≤‡πÑ‡∏Ç‡πà", "‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ô‡∏≤", "‡∏ö‡∏≤‡∏á‡∏ï‡∏µ‡∏ô‡πÄ‡∏õ‡πá‡∏î", "‡∏ö‡∏≤‡∏á‡πÑ‡∏ú‡πà",
        "‡∏Ñ‡∏•‡∏≠‡∏á‡∏à‡∏∏‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏å‡∏≠", "‡∏ö‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡∏ß", "‡∏ö‡∏≤‡∏á‡∏Ç‡∏ß‡∏±‡∏ç", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ô‡∏Ñ‡∏£‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏ï", "‡∏ß‡∏±‡∏á‡∏ï‡∏∞‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏ô",
        "‡πÇ‡∏™‡∏ò‡∏£", "‡∏ö‡∏≤‡∏á‡∏û‡∏£‡∏∞", "‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡πÑ‡∏´", "‡∏´‡∏ô‡∏≤‡∏°‡πÅ‡∏î‡∏á", "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏£‡∏á",
        "‡∏Ñ‡∏•‡∏≠‡∏á‡∏≠‡∏∏‡∏î‡∏°‡∏ä‡∏•‡∏à‡∏£", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡πÅ‡∏û‡πà‡∏á", "‡∏ö‡∏≤‡∏á‡πÄ‡∏ï‡∏¢"
    ],
    "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏•‡πâ‡∏≤": [
        "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏•‡πâ‡∏≤", "‡∏ö‡∏≤‡∏á‡∏™‡∏ß‡∏ô", "‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏à‡πá‡∏î", "‡∏õ‡∏≤‡∏Å‡∏ô‡πâ‡∏≥", "‡∏ó‡πà‡∏≤‡∏ó‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏á",
        "‡∏™‡∏≤‡∏ß‡∏ä‡∏∞‡πÇ‡∏á‡∏Å", "‡πÄ‡∏™‡∏°‡πá‡∏î‡πÄ‡∏´‡∏ô‡∏∑‡∏≠", "‡πÄ‡∏™‡∏°‡πá‡∏î‡πÉ‡∏ï‡πâ", "‡∏´‡∏±‡∏ß‡πÑ‡∏ó‡∏£"
    ],
    "‡∏ö‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß": [
        "‡∏ö‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß", "‡∏ö‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏Å", "‡∏™‡∏¥‡∏á‡πÇ‡∏ï‡∏ó‡∏≠‡∏á", "‡∏´‡∏°‡∏≠‡∏ô‡∏ó‡∏≠‡∏á", "‡∏ö‡∏∂‡∏á‡∏ô‡πâ‡∏≥‡∏£‡∏±‡∏Å‡∏©‡πå",
        "‡∏î‡∏≠‡∏ô‡πÄ‡∏Å‡∏≤‡∏∞‡∏Å‡∏≤", "‡πÇ‡∏¢‡∏ò‡∏∞‡∏Å‡∏≤", "‡∏î‡∏≠‡∏ô‡∏â‡∏¥‡∏°‡∏û‡∏•‡∏µ", "‡∏®‡∏≤‡∏•‡∏≤‡πÅ‡∏î‡∏á", "‡πÇ‡∏û‡∏£‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"
    ],
    "‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á": [
        "‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á", "‡∏ó‡πà‡∏≤‡∏™‡∏∞‡∏≠‡πâ‡∏≤‡∏ô", "‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ß", "‡∏ö‡∏≤‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£", "‡∏ö‡∏≤‡∏á‡∏ú‡∏∂‡πâ‡∏á",
        "‡∏ö‡∏≤‡∏á‡πÄ‡∏Å‡∏•‡∏∑‡∏≠", "‡∏™‡∏≠‡∏á‡∏Ñ‡∏•‡∏≠‡∏á", "‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å", "‡∏û‡∏¥‡∏°‡∏û‡∏≤", "‡∏ó‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏°",
        "‡∏´‡∏≠‡∏°‡∏®‡∏µ‡∏•", "‡πÄ‡∏Ç‡∏≤‡∏î‡∏¥‡∏ô"
    ],
    "‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏û‡∏ò‡∏¥‡πå": [
        "‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏û‡∏ò‡∏¥‡πå", "‡πÄ‡∏Å‡∏≤‡∏∞‡πÑ‡∏£‡πà", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡∏∏‡∏î", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏û‡∏ò‡∏¥‡πå", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ß‡∏®",
        "‡∏î‡∏≠‡∏ô‡∏ó‡∏£‡∏≤‡∏¢", "‡πÄ‡∏ó‡∏û‡∏£‡∏≤‡∏ä", "‡∏ó‡πà‡∏≤‡∏û‡∏•‡∏±‡∏ö", "‡∏´‡∏ô‡∏≠‡∏á‡∏ï‡∏µ‡∏ô‡∏ô‡∏Å", "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß",
        "‡∏ö‡∏≤‡∏á‡∏ã‡πà‡∏≠‡∏ô", "‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏π‡∏î", "‡πÅ‡∏´‡∏•‡∏°‡∏õ‡∏£‡∏∞‡∏î‡∏π‡πà", "‡∏•‡∏≤‡∏î‡∏Ç‡∏ß‡∏≤‡∏á", "‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
        "‡πÅ‡∏™‡∏ô‡∏†‡∏π‡∏î‡∏≤‡∏©", "‡∏™‡∏¥‡∏ö‡πÄ‡∏≠‡πá‡∏î‡∏®‡∏≠‡∏Å"
    ],
    "‡∏û‡∏ô‡∏°‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°": [
        "‡πÄ‡∏Å‡∏≤‡∏∞‡∏Ç‡∏ô‡∏∏‡∏ô", "‡∏ö‡πâ‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏á", "‡∏û‡∏ô‡∏°‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤", "‡∏´‡∏ô‡∏≠‡∏á‡∏¢‡∏≤‡∏ß",
        "‡∏ó‡πà‡∏≤‡∏ñ‡πà‡∏≤‡∏ô", "‡∏´‡∏ô‡∏≠‡∏á‡πÅ‡∏´‡∏ô", "‡πÄ‡∏Ç‡∏≤‡∏´‡∏¥‡∏ô‡∏ã‡πâ‡∏≠‡∏ô"
    ],
    "‡∏£‡∏≤‡∏ä‡∏™‡∏≤‡∏™‡πå‡∏ô": [
        "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≤", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏î‡∏á‡∏ô‡πâ‡∏≠‡∏¢"
    ],
    "‡∏™‡∏ô‡∏≤‡∏°‡∏ä‡∏±‡∏¢‡πÄ‡∏Ç‡∏ï": [
        "‡∏Ñ‡∏π‡πâ‡∏¢‡∏≤‡∏¢‡∏´‡∏°‡∏µ", "‡∏ó‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô", "‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏£‡∏∞‡∏¢‡∏≤", "‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á"
    ],
    "‡πÅ‡∏õ‡∏•‡∏á‡∏¢‡∏≤‡∏ß": [
        "‡πÅ‡∏õ‡∏•‡∏á‡∏¢‡∏≤‡∏ß", "‡∏ß‡∏±‡∏á‡πÄ‡∏¢‡πá‡∏ô", "‡∏´‡∏±‡∏ß‡∏™‡∏≥‡πÇ‡∏£‡∏á", "‡∏´‡∏ô‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏Å‡πà‡∏ô"
    ],
    "‡∏ó‡πà‡∏≤‡∏ï‡∏∞‡πÄ‡∏Å‡∏µ‡∏¢‡∏ö": [
        "‡∏ó‡πà‡∏≤‡∏ï‡∏∞‡πÄ‡∏Å‡∏µ‡∏¢‡∏ö", "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏∞‡πÄ‡∏Å‡∏£‡∏≤"
    ],
    "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô": [
        "‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡∏ß", "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô", "‡∏ö‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏≤", "‡∏ö‡∏≤‡∏á‡πÇ‡∏£‡∏á", "‡∏ö‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î"
    ]
}

COLUMN_NAMES_TH = {
  "TIMESTAMP": "Timestamp ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
  "REPORT_DATE": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
  "DISTRICT": "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
  "TAMBON": "‡∏ï‡∏≥‡∏ö‡∏•",
  "RICE_VARIETY": "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß",
  "AREA_RAI": "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å (‡πÑ‡∏£‡πà)",
  "YIELD_PER_RAI_KG": "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà (‡∏Å‡∏Å.)",
  "IRRIGATION_ZONE": "‡πÄ‡∏Ç‡∏ï‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô",
  "HARVEST_MONTH": "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß",
  "TOTAL_YIELD_TON": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)",
  "ROW_ID": "‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
}

CSV_HEADERS = [
    COLUMN_NAMES_TH["TIMESTAMP"], COLUMN_NAMES_TH["REPORT_DATE"], COLUMN_NAMES_TH["DISTRICT"],
    COLUMN_NAMES_TH["TAMBON"], COLUMN_NAMES_TH["RICE_VARIETY"], COLUMN_NAMES_TH["AREA_RAI"],
    COLUMN_NAMES_TH["YIELD_PER_RAI_KG"], COLUMN_NAMES_TH["IRRIGATION_ZONE"],
    COLUMN_NAMES_TH["HARVEST_MONTH"], COLUMN_NAMES_TH["TOTAL_YIELD_TON"], COLUMN_NAMES_TH["ROW_ID"]
]

RICE_VARIETIES = ["‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥", "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏µ", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå"]
DEFAULT_RICE_VARIETY = "‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
IRRIGATION_OPTIONS = ["‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï", "‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï"]
MONTH_NAMES_TH = ["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"]
MONTH_NUM_TO_NAME_TH = {f"{i+1:02d}": name for i, name in enumerate(MONTH_NAMES_TH)}
MONTH_NAME_TH_TO_NUM = {name: f"{i+1:02d}" for i, name in enumerate(MONTH_NAMES_TH)}


# --- File Data Operations ---
@st.cache_data(ttl=60) # Cache for 1 minute
def load_data_for_entry_form(report_date_str: str, district_name: str) -> dict:
    try:
        target_date = datetime.strptime(report_date_str, "%Y-%m-%d").date()
        day_of_month = target_date.day

        if day_of_month not in [15, 25]:
            return {"error": f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15 ‡∏´‡∏£‡∏∑‡∏≠ 25 (‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {target_date.strftime('%d/%m/%Y')})"}

        if not os.path.exists(DATA_FILE):
            return {"success": True, "data": []}

        df = pd.read_csv(DATA_FILE, keep_default_na=False, na_values=[''], dtype=str)
        numeric_cols_map = {
            COLUMN_NAMES_TH["AREA_RAI"]: float, COLUMN_NAMES_TH["YIELD_PER_RAI_KG"]: float,
            COLUMN_NAMES_TH["TOTAL_YIELD_TON"]: float, COLUMN_NAMES_TH["ROW_ID"]: pd.Int64Dtype()
        }
        for col, dtype in numeric_cols_map.items():
            if col in df.columns:
                if dtype == float: df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0)
                elif dtype == pd.Int64Dtype(): df[col] = pd.to_numeric(df[col], errors='coerce').astype(pd.Int64Dtype())

        if COLUMN_NAMES_TH["REPORT_DATE"] not in df.columns or COLUMN_NAMES_TH["DISTRICT"] not in df.columns:
            return {"success": True, "data": []}

        def parse_date_robust(val):
            if pd.isna(val) or val == "" or val is None: return None
            try: return pd.to_datetime(val).date()
            except: return None
        df['parsed_report_date'] = df[COLUMN_NAMES_TH["REPORT_DATE"]].apply(parse_date_robust)

        filtered_df = df[
            (df['parsed_report_date'] == target_date) &
            (df[COLUMN_NAMES_TH["DISTRICT"]] == district_name)
        ]

        data_to_return = []
        for _, row in filtered_df.iterrows():
            data_to_return.append({
                "tambon": row.get(COLUMN_NAMES_TH["TAMBON"], ""),
                "variety": row.get(COLUMN_NAMES_TH["RICE_VARIETY"], ""),
                "area": row.get(COLUMN_NAMES_TH["AREA_RAI"], 0.0),
                "yieldPerRai": row.get(COLUMN_NAMES_TH["YIELD_PER_RAI_KG"], 0.0),
                "irrigation": row.get(COLUMN_NAMES_TH["IRRIGATION_ZONE"], ""),
                "harvestMonth": row.get(COLUMN_NAMES_TH["HARVEST_MONTH"], "")
            })
        return {"success": True, "data": data_to_return}
    except FileNotFoundError: return {"success": True, "data": []}
    except pd.errors.EmptyDataError: return {"success": True, "data": []}
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (entry): {str(e)}")
        return {"error": f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (entry): {str(e)}"}

def save_data_to_file(payload: dict) -> dict:
    try:
        report_date_str = payload["reportDate"]
        district_name = payload["district"]
        entries_from_client = payload["entries"]
        target_date = datetime.strptime(report_date_str, "%Y-%m-%d").date()
        day_of_month = target_date.day

        if day_of_month not in [15, 25]:
            return {"error": f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15 ‡∏´‡∏£‡∏∑‡∏≠ 25 (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {target_date.strftime('%d/%m/%Y')})"}

        existing_df = pd.DataFrame(columns=CSV_HEADERS)
        if os.path.exists(DATA_FILE):
            try:
                existing_df = pd.read_csv(DATA_FILE, keep_default_na=False, na_values=[''], dtype=str)
                if existing_df.empty and os.path.getsize(DATA_FILE) > 0:
                     existing_df = pd.DataFrame(columns=CSV_HEADERS)
            except pd.errors.EmptyDataError: pass
        
        if existing_df.empty or not all(h in existing_df.columns for h in CSV_HEADERS):
            existing_df = pd.DataFrame(columns=CSV_HEADERS)

        df_to_keep = existing_df.copy()
        if not df_to_keep.empty and COLUMN_NAMES_TH["REPORT_DATE"] in df_to_keep.columns and COLUMN_NAMES_TH["DISTRICT"] in df_to_keep.columns:
            def parse_date_robust(val):
                if pd.isna(val) or val == "" or val is None: return None
                try: return pd.to_datetime(val).date()
                except: return None
            temp_report_date_series = df_to_keep[COLUMN_NAMES_TH["REPORT_DATE"]].apply(parse_date_robust)
            condition_to_remove = ((temp_report_date_series == target_date) & (df_to_keep[COLUMN_NAMES_TH["DISTRICT"]] == district_name))
            df_to_keep = df_to_keep[~condition_to_remove]

        new_rows_list = []
        current_timestamp_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        report_date_for_file_str = target_date.strftime("%Y-%m-%d")
        
        max_row_id = 0
        if not df_to_keep.empty and COLUMN_NAMES_TH["ROW_ID"] in df_to_keep.columns:
            numeric_row_ids = pd.to_numeric(df_to_keep[COLUMN_NAMES_TH["ROW_ID"]], errors='coerce').fillna(0)
            if not numeric_row_ids.empty: max_row_id = numeric_row_ids.max()
        next_row_id = int(max_row_id) + 1

        for entry in entries_from_client:
            variety = entry["variety"]
            area_str = entry.get("area", "0.0"); area = float(area_str) if area_str and area_str != "None" else 0.0
            yield_per_rai_str = entry.get("yieldPerRai", "0.0"); yield_per_rai_kg = float(yield_per_rai_str) if yield_per_rai_str and yield_per_rai_str != "None" else 0.0

            if variety and area > 0 and yield_per_rai_kg > 0:
                total_yield_ton = (area * yield_per_rai_kg) / 1000
                new_rows_list.append({
                    COLUMN_NAMES_TH["TIMESTAMP"]: current_timestamp_str, COLUMN_NAMES_TH["REPORT_DATE"]: report_date_for_file_str,
                    COLUMN_NAMES_TH["DISTRICT"]: district_name, COLUMN_NAMES_TH["TAMBON"]: entry["tambon"],
                    COLUMN_NAMES_TH["RICE_VARIETY"]: variety, COLUMN_NAMES_TH["AREA_RAI"]: area,
                    COLUMN_NAMES_TH["YIELD_PER_RAI_KG"]: yield_per_rai_kg, COLUMN_NAMES_TH["IRRIGATION_ZONE"]: entry["irrigation"],
                    COLUMN_NAMES_TH["HARVEST_MONTH"]: entry["harvestMonth"], COLUMN_NAMES_TH["TOTAL_YIELD_TON"]: total_yield_ton,
                    COLUMN_NAMES_TH["ROW_ID"]: next_row_id
                }); next_row_id += 1
        
        updated_df = df_to_keep
        if new_rows_list:
            new_data_df = pd.DataFrame(new_rows_list)
            updated_df = pd.concat([df_to_keep, new_data_df], ignore_index=True)

        if not updated_df.empty:
            for col_header in CSV_HEADERS:
                if col_header not in updated_df.columns: updated_df[col_header] = ""
            updated_df = updated_df.reindex(columns=CSV_HEADERS)
            updated_df.to_csv(DATA_FILE, index=False, encoding='utf-8-sig')
        else:
            pd.DataFrame(columns=CSV_HEADERS).to_csv(DATA_FILE, index=False, encoding='utf-8-sig')
        return {"success": True, "message": f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(new_rows_list)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà)"}
    except Exception as e:
        st.error(f"Save error: {e}"); import traceback; st.error(traceback.format_exc())
        return {"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}"}

@st.cache_data(ttl=30) # Cache for 30 seconds
def load_all_data_from_file_for_view() -> pd.DataFrame:
    if not os.path.exists(DATA_FILE):
        return pd.DataFrame(columns=CSV_HEADERS)
    try:
        df = pd.read_csv(DATA_FILE, keep_default_na=False, na_values=[''], dtype=str)
        numeric_cols_map = {
            COLUMN_NAMES_TH["AREA_RAI"]: float, COLUMN_NAMES_TH["YIELD_PER_RAI_KG"]: float,
            COLUMN_NAMES_TH["TOTAL_YIELD_TON"]: float, COLUMN_NAMES_TH["ROW_ID"]: pd.Int64Dtype()
        }
        for col, dtype in numeric_cols_map.items():
            if col in df.columns:
                if dtype == float: df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0)
                elif dtype == pd.Int64Dtype(): df[col] = pd.to_numeric(df[col], errors='coerce').astype(pd.Int64Dtype())
        if COLUMN_NAMES_TH["REPORT_DATE"] in df.columns:
             df[COLUMN_NAMES_TH["REPORT_DATE"]] = pd.to_datetime(df[COLUMN_NAMES_TH["REPORT_DATE"]], errors='coerce')
        return df
    except pd.errors.EmptyDataError: return pd.DataFrame(columns=CSV_HEADERS)
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return pd.DataFrame(columns=CSV_HEADERS)

# --- Sidebar Navigation ---
with st.sidebar:
    st.image("https://i.imgur.com/g0hM2sz.png", width=100) # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Logo, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÑ‡∏î‡πâ
    st.title("üåæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏ß")
    app_mode = st.radio(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠:",
        ("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"), # ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á
        key="app_mode_selector",
        # label_visibility="collapsed" # ‡∏ã‡πà‡∏≠‡∏ô label "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠" ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    )
    st.markdown("---")
    st.info("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß")
    st.caption(f"‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: `{DATA_FILE}`")


# --- Main App Logic ---
if app_mode == "üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
    st.header("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß")
    st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ï‡∏≥‡∏ö‡∏•")

    # Initialize Session State for Data Entry Page
    if "entry_selected_district" not in st.session_state: st.session_state.entry_selected_district = None
    if "entry_selected_report_date_str" not in st.session_state: st.session_state.entry_selected_report_date_str = None
    if "entry_tambon_data_entries" not in st.session_state: st.session_state.entry_tambon_data_entries = {}
    if "entry_show_confirmation" not in st.session_state: st.session_state.entry_show_confirmation = False
    if "entry_data_to_confirm" not in st.session_state: st.session_state.entry_data_to_confirm = []

    with st.container(border=True):
        st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
        current_year_be = datetime.now().year + 543
        year_options_be = list(range(current_year_be - 2, current_year_be + 3))
        
        sel_cols = st.columns([1,1,1,1.5]) # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        with sel_cols[0]: entry_selected_year_be = st.selectbox("‡∏õ‡∏µ (‡∏û.‡∏®.):", year_options_be, index=year_options_be.index(current_year_be), key="sel_year_be_entry")
        with sel_cols[1]:
            entry_selected_month_th = st.selectbox("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", MONTH_NAMES_TH, index=datetime.now().month -1, key="sel_month_th_entry")
            entry_selected_month_num_str = MONTH_NAME_TH_TO_NUM[entry_selected_month_th]
        with sel_cols[2]: entry_selected_day_str = st.radio("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:", ("15", "25"), horizontal=True, key="sel_day_str_entry")
        with sel_cols[3]:
            district_options_entry = ["-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ --"] + sorted(list(DISTRICTS_DATA.keys()))
            entry_selected_district_input = st.selectbox("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:", district_options_entry, key="sel_district_input_entry")

    def process_selection_change_for_entry_form():
        if entry_selected_district_input and entry_selected_district_input != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ --":
            st.session_state.entry_selected_district = entry_selected_district_input
            year_ce = entry_selected_year_be - 543
            st.session_state.entry_selected_report_date_str = f"{year_ce}-{entry_selected_month_num_str}-{entry_selected_day_str}"
            with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {entry_selected_day_str}/{entry_selected_month_num_str}/{entry_selected_year_be} ‡∏≠. {entry_selected_district_input}..."):
                result = load_data_for_entry_form(st.session_state.entry_selected_report_date_str, st.session_state.entry_selected_district)
            
            if result.get("error"): st.error(result["error"]); st.session_state.entry_tambon_data_entries = {}
            elif result.get("success"):
                loaded_data_for_ui = result["data"]; new_tambon_entries = {}; tambons_for_district = DISTRICTS_DATA.get(st.session_state.entry_selected_district, [])
                for tambon_name in tambons_for_district:
                    entries_for_this_tambon = [d for d in loaded_data_for_ui if d["tambon"] == tambon_name]
                    current_default_harvest_month = MONTH_NAMES_TH[datetime.now().month-1]
                    if not entries_for_this_tambon: new_tambon_entries[tambon_name] = [{"id": f"{tambon_name}_0_{datetime.now().timestamp()}","variety": DEFAULT_RICE_VARIETY, "area": "", "yieldPerRai": "","irrigation": IRRIGATION_OPTIONS[0], "harvestMonth": current_default_harvest_month}]
                    else:
                        new_tambon_entries[tambon_name] = []
                        for i, entry in enumerate(entries_for_this_tambon): new_tambon_entries[tambon_name].append({"id": f"{tambon_name}_{i}_{datetime.now().timestamp()}","variety": entry.get("variety", DEFAULT_RICE_VARIETY),"area": str(entry.get("area", "") if entry.get("area") is not None else ""),"yieldPerRai": str(entry.get("yieldPerRai", "") if entry.get("yieldPerRai") is not None else ""),"irrigation": entry.get("irrigation", IRRIGATION_OPTIONS[0]),"harvestMonth": entry.get("harvestMonth", current_default_harvest_month)})
                st.session_state.entry_tambon_data_entries = new_tambon_entries
                if loaded_data_for_ui: st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(loaded_data_for_ui)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
                else: st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        else: st.session_state.entry_selected_district = None; st.session_state.entry_selected_report_date_str = None; st.session_state.entry_tambon_data_entries = {}

    current_selection_tuple_entry = (entry_selected_year_be, entry_selected_month_num_str, entry_selected_day_str, entry_selected_district_input)
    prev_selection_tuple_entry = st.session_state.get("_previous_selection_tuple_entry", None) # Changed key
    if current_selection_tuple_entry != prev_selection_tuple_entry:
        st.session_state._previous_selection_tuple_entry = current_selection_tuple_entry
        if entry_selected_district_input and entry_selected_district_input != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ --": process_selection_change_for_entry_form(); st.rerun()
        elif prev_selection_tuple_entry is not None: st.session_state.entry_selected_district = None; st.session_state.entry_selected_report_date_str = None; st.session_state.entry_tambon_data_entries = {}; st.rerun()

    if st.session_state.entry_selected_district and st.session_state.entry_tambon_data_entries:
        st.markdown("---")
        st.subheader(f"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ï‡∏≥‡∏ö‡∏•: {st.session_state.entry_selected_district}")
        for tambon_name, entries in st.session_state.entry_tambon_data_entries.items():
            with st.expander(f"‡∏ï‡∏≥‡∏ö‡∏•: {tambon_name}", expanded=True):
                # Header row using st.markdown for better control if needed, or just captions
                header_cols = st.columns([2.2, 1, 1.2, 1.5, 1.5, 0.6]) # Adjusted column ratios
                header_cols[0].caption("‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß")
                header_cols[1].caption("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà)")
                header_cols[2].caption("‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï/‡πÑ‡∏£‡πà (‡∏Å‡∏Å.)")
                header_cols[3].caption("‡πÄ‡∏Ç‡∏ï‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô")
                header_cols[4].caption("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß")
                header_cols[5].caption("‡∏•‡∏ö")

                for i, entry_data in enumerate(entries):
                    entry_id = entry_data['id']; cols_entry = st.columns([2.2, 1, 1.2, 1.5, 1.5, 0.6])
                    with cols_entry[0]: default_variety_index = RICE_VARIETIES.index(entry_data.get("variety", DEFAULT_RICE_VARIETY)); entries[i]["variety"] = st.selectbox("‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß", RICE_VARIETIES, index=default_variety_index, key=f"var_{entry_id}", label_visibility="collapsed")
                    with cols_entry[1]: area_value = entry_data.get("area", ""); area_float = float(area_value) if area_value and area_value not in ["None", ""] else None; entries[i]["area"] = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", min_value=0.0, step=0.01, value=area_float, format="%.2f", key=f"area_{entry_id}", label_visibility="collapsed")
                    with cols_entry[2]: yield_value = entry_data.get("yieldPerRai", ""); yield_float = float(yield_value) if yield_value and yield_value not in ["None", ""] else None; entries[i]["yieldPerRai"] = st.number_input("‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï/‡πÑ‡∏£‡πà", min_value=0.0, step=0.01, value=yield_float, format="%.2f", key=f"yield_{entry_id}", label_visibility="collapsed")
                    with cols_entry[3]: default_irrigation_index = IRRIGATION_OPTIONS.index(entry_data.get("irrigation", IRRIGATION_OPTIONS[0])); entries[i]["irrigation"] = st.selectbox("‡πÄ‡∏Ç‡∏ï‡∏Ø", IRRIGATION_OPTIONS,index=default_irrigation_index,key=f"irr_{entry_id}", label_visibility="collapsed")
                    with cols_entry[4]: current_month_index = datetime.now().month -1; default_harvest_index = MONTH_NAMES_TH.index(entry_data.get("harvestMonth", MONTH_NAMES_TH[current_month_index])); entries[i]["harvestMonth"] = st.selectbox("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß", MONTH_NAMES_TH,index=default_harvest_index,key=f"harv_{entry_id}", label_visibility="collapsed")
                    with cols_entry[5]:
                        if st.button("üóëÔ∏è", key=f"del_{entry_id}", help="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ"): # Use icon for delete
                            st.session_state.entry_tambon_data_entries[tambon_name].pop(i)
                            if not st.session_state.entry_tambon_data_entries[tambon_name]: st.session_state.entry_tambon_data_entries[tambon_name].append({"id": f"{tambon_name}_new_{datetime.now().timestamp()}","variety": DEFAULT_RICE_VARIETY, "area": "", "yieldPerRai": "","irrigation": IRRIGATION_OPTIONS[0], "harvestMonth": MONTH_NAMES_TH[datetime.now().month-1]})
                            st.rerun()
                if st.button(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ({tambon_name})", key=f"add_{tambon_name}", help="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡∏ö‡∏•‡∏ô‡∏µ‡πâ"): # Use icon
                    st.session_state.entry_tambon_data_entries[tambon_name].append({"id": f"{tambon_name}_new_{datetime.now().timestamp()}","variety": DEFAULT_RICE_VARIETY, "area": "", "yieldPerRai": "","irrigation": IRRIGATION_OPTIONS[0], "harvestMonth": MONTH_NAMES_TH[datetime.now().month-1]})
                    st.rerun()
    
    st.markdown("---")
    action_button_cols = st.columns(2)
    with action_button_cols[0]:
        if st.button("üîÉ ‡∏•‡πâ‡∏≤‡∏á/‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà", use_container_width=True, key="btn_clear_reload_entry", help="‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"):
            st.session_state._previous_selection_tuple_entry = None
            if entry_selected_district_input and entry_selected_district_input != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ --": process_selection_change_for_entry_form()
            else: st.session_state.entry_selected_district = None; st.session_state.entry_selected_report_date_str = None; st.session_state.entry_tambon_data_entries = {}
            st.rerun()
    with action_button_cols[1]:
        if st.button("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", type="primary", use_container_width=True, key="btn_validate_entry", help="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á"):
            if not st.session_state.entry_selected_district or not st.session_state.entry_selected_report_date_str: st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            else:
                all_entries_to_confirm = []; is_valid = True; has_actual_data = False
                for tambon_name, entries_list in st.session_state.entry_tambon_data_entries.items():
                    for i, entry_dict in enumerate(entries_list):
                        variety = entry_dict.get("variety", DEFAULT_RICE_VARIETY)
                        try: area = float(entry_dict.get("area") if entry_dict.get("area") not in [None, ""] else "0.0")
                        except ValueError: area = 0.0
                        try: yield_val = float(entry_dict.get("yieldPerRai") if entry_dict.get("yieldPerRai") not in [None, ""] else "0.0")
                        except ValueError: yield_val = 0.0
                        if variety: # Only process if a variety is selected
                            if area < 0 : st.error(f"[{tambon_name}] ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1}: ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ø ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö"); is_valid = False; break
                            if yield_val < 0: st.error(f"[{tambon_name}] ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1}: ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï/‡πÑ‡∏£‡πà‡∏Ø ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö"); is_valid = False; break
                            if area > 0 and yield_val <= 0: st.error(f"[{tambon_name}] ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1}: ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ({area:.2f} ‡πÑ‡∏£‡πà) ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï/‡πÑ‡∏£‡πà‡∏Ø ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"); is_valid = False; break
                            if yield_val > 0 and area <= 0: st.error(f"[{tambon_name}] ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1}: ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï/‡πÑ‡∏£‡πà ({yield_val:.2f} ‡∏Å‡∏Å.) ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ø ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0"); is_valid = False; break
                            # Add entry to confirm list even if area/yield is 0, as it might clear existing data.
                            all_entries_to_confirm.append({"tambon": tambon_name, "id": entry_dict["id"], "variety": variety, "area": str(area),"yieldPerRai": str(yield_val),"irrigation": entry_dict.get("irrigation", IRRIGATION_OPTIONS[0]),"harvestMonth": entry_dict.get("harvestMonth", MONTH_NAMES_TH[0])})
                            if area > 0 and yield_val > 0: has_actual_data = True
                    if not is_valid: break
                if is_valid:
                    if not all_entries_to_confirm and not has_actual_data : st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡∏´‡∏≤‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏î '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
                    elif not has_actual_data and all_entries_to_confirm : st.warning("‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏≤‡∏Å‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏î '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
                    st.session_state.entry_data_to_confirm = all_entries_to_confirm; st.session_state.entry_show_confirmation = True; st.rerun()

    if st.session_state.entry_show_confirmation:
        with st.container(border=True): # Confirmation "Modal"
            st.subheader("üîí ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            if st.session_state.entry_selected_report_date_str: year_ce_conf = int(st.session_state.entry_selected_report_date_str.split("-")[0]); month_conf = st.session_state.entry_selected_report_date_str.split("-")[1]; day_conf = st.session_state.entry_selected_report_date_str.split("-")[2]; year_be_conf = year_ce_conf + 543; st.markdown(f"**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:** {day_conf}/{month_conf}/{year_be_conf}")
            else: st.markdown("**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:** (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
            st.markdown(f"**‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:** {st.session_state.entry_selected_district or '(‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)'}")
            
            if st.session_state.entry_data_to_confirm:
                confirm_df_data = []
                for entry in st.session_state.entry_data_to_confirm:
                    area_c = float(entry.get('area') or 0.0); yield_c = float(entry.get('yieldPerRai') or 0.0)
                    if area_c > 0 and yield_c > 0: confirm_df_data.append({"‡∏ï‡∏≥‡∏ö‡∏•": entry["tambon"],"‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß": entry["variety"],"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà)": f"{area_c:,.2f}","‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï/‡πÑ‡∏£‡πà (‡∏Å‡∏Å.)": f"{yield_c:,.2f}","‡πÄ‡∏Ç‡∏ï‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô": entry["irrigation"],"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß": entry["harvestMonth"]})
                if confirm_df_data: st.dataframe(pd.DataFrame(confirm_df_data), use_container_width=True, hide_index=True)
                else: st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï > 0) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)")
            else: st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)")
            
            confirm_cols = st.columns(2)
            with confirm_cols[0]:
                if st.button("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True, key="btn_edit_confirm_entry", help="‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å"): st.session_state.entry_show_confirmation = False; st.rerun()
            with confirm_cols[1]:
                if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", type="primary", use_container_width=True, key="btn_save_confirm_entry", help="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV"):
                    payload_to_save_file = {"reportDate": st.session_state.entry_selected_report_date_str,"district": st.session_state.entry_selected_district,"entries": st.session_state.entry_data_to_confirm}
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå..."): save_result = save_data_to_file(payload_to_save_file)
                    if save_result.get("success"):
                        st.success(save_result["message"]); st.toast("‚úîÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", icon="üéâ"); st.session_state.entry_show_confirmation = False; st.session_state._previous_selection_tuple_entry = None
                        if entry_selected_district_input and entry_selected_district_input != "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ --": process_selection_change_for_entry_form() # Reload data
                        st.balloons() # Fun!
                        st.rerun()
                    else: st.error(save_result.get("error", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"))


elif app_mode == "üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
    st.header("üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß")
    st.caption("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")

    df_all_data_raw = load_all_data_from_file_for_view()

    if df_all_data_raw.empty:
        st.info(f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå `{DATA_FILE}` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ 'üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
    else:
        # st.write(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df_all_data_raw)} ‡πÅ‡∏ñ‡∏ß (‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á):") # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞
        df_view = df_all_data_raw.copy()

        with st.container(border=True):
            st.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            if COLUMN_NAMES_TH["REPORT_DATE"] in df_view.columns and not pd.api.types.is_datetime64_any_dtype(df_view[COLUMN_NAMES_TH["REPORT_DATE"]]):
                df_view[COLUMN_NAMES_TH["REPORT_DATE"]] = pd.to_datetime(df_view[COLUMN_NAMES_TH["REPORT_DATE"]], errors='coerce')
            df_view = df_view.dropna(subset=[COLUMN_NAMES_TH["REPORT_DATE"]]).copy()

            if not df_view.empty:
                df_view['‡∏õ‡∏µ ‡∏û.‡∏®. (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'] = df_view[COLUMN_NAMES_TH["REPORT_DATE"]].dt.year + 543
                df_view['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'] = df_view[COLUMN_NAMES_TH["REPORT_DATE"]].dt.month
                df_view['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'] = df_view[COLUMN_NAMES_TH["REPORT_DATE"]].dt.strftime('%m').map(MONTH_NUM_TO_NAME_TH)

            date_filter_cols = st.columns(2)
            min_date_avail = df_view[COLUMN_NAMES_TH["REPORT_DATE"]].min().date() if not df_view.empty and COLUMN_NAMES_TH["REPORT_DATE"] in df_view.columns and not df_view[COLUMN_NAMES_TH["REPORT_DATE"]].isna().all() else date.today() - timedelta(days=365)
            max_date_avail = df_view[COLUMN_NAMES_TH["REPORT_DATE"]].max().date() if not df_view.empty and COLUMN_NAMES_TH["REPORT_DATE"] in df_view.columns and not df_view[COLUMN_NAMES_TH["REPORT_DATE"]].isna().all() else date.today()
            
            start_date = date_filter_cols[0].date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:", min_date_avail, min_value=min_date_avail, max_value=max_date_avail, key="view_start_date", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
            end_date = date_filter_cols[1].date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:", max_date_avail, min_value=start_date if start_date else min_date_avail, max_value=max_date_avail, key="view_end_date", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

            filter_row1_cols = st.columns(2)
            unique_years_be = sorted(df_view['‡∏õ‡∏µ ‡∏û.‡∏®. (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'].dropna().unique(), reverse=True) if '‡∏õ‡∏µ ‡∏û.‡∏®. (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)' in df_view else []
            selected_filter_years = filter_row1_cols[0].multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®.:", unique_years_be, default=unique_years_be, key="filter_years_view", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")

            unique_months_ordered = []
            if '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)' in df_view.columns and '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)' in df_view.columns and not df_view['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'].dropna().empty:
                month_map = df_view[['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)']].dropna().drop_duplicates().sort_values('‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)')
                unique_months_ordered = month_map['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'].tolist()
            selected_filter_months = filter_row1_cols[1].multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", unique_months_ordered, default=unique_months_ordered, key="filter_months_view", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")

            filter_row2_cols = st.columns(2)
            unique_districts = sorted(df_view[COLUMN_NAMES_TH["DISTRICT"]].dropna().unique()) if COLUMN_NAMES_TH["DISTRICT"] in df_view else []
            selected_filter_districts = filter_row2_cols[0].multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:", unique_districts, default=unique_districts, key="filter_districts_view", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
            
            unique_rice_varieties = sorted(df_view[COLUMN_NAMES_TH["RICE_VARIETY"]].dropna().unique()) if COLUMN_NAMES_TH["RICE_VARIETY"] in df_view else []
            selected_filter_varieties = filter_row2_cols[1].multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß:", unique_rice_varieties, default=unique_rice_varieties, key="filter_varieties_view", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")

        df_filtered_for_display = df_view.copy()
        if start_date and end_date and COLUMN_NAMES_TH["REPORT_DATE"] in df_filtered_for_display.columns:
            df_filtered_for_display = df_filtered_for_display[(df_filtered_for_display[COLUMN_NAMES_TH["REPORT_DATE"]].dt.date >= start_date) & (df_filtered_for_display[COLUMN_NAMES_TH["REPORT_DATE"]].dt.date <= end_date)]
        if selected_filter_years and '‡∏õ‡∏µ ‡∏û.‡∏®. (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)' in df_filtered_for_display.columns: df_filtered_for_display = df_filtered_for_display[df_filtered_for_display['‡∏õ‡∏µ ‡∏û.‡∏®. (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'].isin(selected_filter_years)]
        if selected_filter_months and '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)' in df_filtered_for_display.columns: df_filtered_for_display = df_filtered_for_display[df_filtered_for_display['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)'].isin(selected_filter_months)]
        if selected_filter_districts and COLUMN_NAMES_TH["DISTRICT"] in df_filtered_for_display.columns: df_filtered_for_display = df_filtered_for_display[df_filtered_for_display[COLUMN_NAMES_TH["DISTRICT"]].isin(selected_filter_districts)]
        if selected_filter_varieties and COLUMN_NAMES_TH["RICE_VARIETY"] in df_filtered_for_display.columns: df_filtered_for_display = df_filtered_for_display[df_filtered_for_display[COLUMN_NAMES_TH["RICE_VARIETY"]].isin(selected_filter_varieties)]

        st.markdown("---")
        st.subheader("üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á)")
        if df_filtered_for_display.empty:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        else:
            st.write(f"‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df_filtered_for_display)} ‡πÅ‡∏ñ‡∏ß:")
            cols_to_display_in_table = [col for col in CSV_HEADERS if col not in [COLUMN_NAMES_TH["TIMESTAMP"], COLUMN_NAMES_TH["ROW_ID"]]] # ‡πÄ‡∏≠‡∏≤ Timestamp ‡πÅ‡∏•‡∏∞ Row ID ‡∏≠‡∏≠‡∏Å
            df_final_display = df_filtered_for_display.copy()
            for col_header in cols_to_display_in_table:
                if col_header not in df_final_display.columns: df_final_display[col_header] = ""
            df_final_display = df_final_display[cols_to_display_in_table]

            if COLUMN_NAMES_TH["REPORT_DATE"] in df_final_display.columns:
                df_final_display[COLUMN_NAMES_TH["REPORT_DATE"]] = pd.to_datetime(df_final_display[COLUMN_NAMES_TH["REPORT_DATE"]], errors='coerce').dt.strftime('%d/%m/') + (pd.to_datetime(df_final_display[COLUMN_NAMES_TH["REPORT_DATE"]], errors='coerce').dt.year + 543).astype(str)
                df_final_display[COLUMN_NAMES_TH["REPORT_DATE"]] = df_final_display[COLUMN_NAMES_TH["REPORT_DATE"]].replace(['NaT/NaTNaT', 'NaT/NaT'], ['-', '-'], regex=False)


            for col_name in [COLUMN_NAMES_TH["AREA_RAI"], COLUMN_NAMES_TH["YIELD_PER_RAI_KG"]]:
                if col_name in df_final_display.columns: df_final_display[col_name] = pd.to_numeric(df_final_display[col_name], errors='coerce').fillna(0).apply(lambda x: f"{x:,.2f}")
            if COLUMN_NAMES_TH["TOTAL_YIELD_TON"] in df_final_display.columns: df_final_display[COLUMN_NAMES_TH["TOTAL_YIELD_TON"]] = pd.to_numeric(df_final_display[COLUMN_NAMES_TH["TOTAL_YIELD_TON"]], errors='coerce').fillna(0).apply(lambda x: f"{x:,.3f}")
            
            st.dataframe(df_final_display, use_container_width=True, hide_index=True, height=350)

                        # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á st.dataframe(df_final_display, ...)) ...

            total_area_display = pd.to_numeric(df_filtered_for_display[COLUMN_NAMES_TH["AREA_RAI"]], errors='coerce').sum()
            total_yield_ton_display = pd.to_numeric(df_filtered_for_display[COLUMN_NAMES_TH["TOTAL_YIELD_TON"]], errors='coerce').sum()

            # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
            st.markdown("---") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            summary_cols_main_table = st.columns(2)
            with summary_cols_main_table[0]:
                st.metric(label="‡∏£‡∏ß‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å (‡πÑ‡∏£‡πà)", value=f"{total_area_display:,.2f}")
            with summary_cols_main_table[1]:
                st.metric(label="‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô)", value=f"{total_yield_ton_display:,.3f}")
            # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

            with st.container(border=True): # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô container
                st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏≤‡∏°‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÅ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß)")
                if not df_filtered_for_display.empty:
                    df_summary_dv = df_filtered_for_display.groupby(
                        [COLUMN_NAMES_TH["DISTRICT"], COLUMN_NAMES_TH["RICE_VARIETY"]], as_index=False
                    ).agg(temp_area_sum=(COLUMN_NAMES_TH["AREA_RAI"], 'sum'), temp_yield_sum=(COLUMN_NAMES_TH["TOTAL_YIELD_TON"], 'sum'))
                    
                    summary_overall_area = df_summary_dv["temp_area_sum"].sum() if not df_summary_dv.empty else 0.0
                    summary_overall_yield = df_summary_dv["temp_yield_sum"].sum() if not df_summary_dv.empty else 0.0

                    df_summary_dv.rename(columns={
                        COLUMN_NAMES_TH["DISTRICT"]: "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", COLUMN_NAMES_TH["RICE_VARIETY"]: "‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß",
                        "temp_area_sum": "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° (‡πÑ‡∏£‡πà)", "temp_yield_sum": "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏ï‡∏±‡∏ô)"}, inplace=True)
                    
                    df_summary_display_dv = df_summary_dv.copy()
                    if not df_summary_display_dv.empty:
                        df_summary_display_dv["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° (‡πÑ‡∏£‡πà)"] = df_summary_display_dv["‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° (‡πÑ‡∏£‡πà)"].apply(lambda x: f"{x:,.2f}")
                        df_summary_display_dv["‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏ï‡∏±‡∏ô)"] = df_summary_display_dv["‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏ï‡∏±‡∏ô)"].apply(lambda x: f"{x:,.3f}")
                        
                        st.dataframe(df_summary_display_dv, use_container_width=True, hide_index=True, height=300,
                                     column_order=("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß", "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° (‡πÑ‡∏£‡πà)", "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏ï‡∏±‡∏ô)"))
                        
                        # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                        st.markdown("---") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        summary_cols_sub_table = st.columns(2)
                        with summary_cols_sub_table[0]:
                            st.metric(label="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ (‡πÑ‡∏£‡πà)", value=f"{summary_overall_area:,.2f}")
                        with summary_cols_sub_table[1]:
                            st.metric(label="‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ (‡∏ï‡∏±‡∏ô)", value=f"{summary_overall_yield:,.3f}")
                        # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                    else: st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ô‡∏µ‡πâ")
                else: st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ")
            
            st.markdown("---")
            st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á)")
            
            if not df_filtered_for_display.empty:
                # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á
                if COLUMN_NAMES_TH["DISTRICT"] in df_filtered_for_display and COLUMN_NAMES_TH["RICE_VARIETY"] in df_filtered_for_display and COLUMN_NAMES_TH["AREA_RAI"] in df_filtered_for_display:
                    df_bar_area = df_filtered_for_display.groupby([COLUMN_NAMES_TH["DISTRICT"], COLUMN_NAMES_TH["RICE_VARIETY"]],as_index=False)[COLUMN_NAMES_TH["AREA_RAI"]].sum()
                    if not df_bar_area.empty:
                        fig_bar = px.bar(df_bar_area, x=COLUMN_NAMES_TH["DISTRICT"], y=COLUMN_NAMES_TH["AREA_RAI"], color=COLUMN_NAMES_TH["RICE_VARIETY"],
                                         title="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å (‡πÑ‡∏£‡πà) ‡∏£‡∏≤‡∏¢‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß)",
                                         labels={COLUMN_NAMES_TH["AREA_RAI"]: "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° (‡πÑ‡∏£‡πà)", COLUMN_NAMES_TH["DISTRICT"]: "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", COLUMN_NAMES_TH["RICE_VARIETY"]: "‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß"},
                                         barmode='stack', height=500)
                        fig_bar.update_layout(xaxis_title="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", yaxis_title="‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° (‡πÑ‡∏£‡πà)", legend_title_text='‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß')
                        st.plotly_chart(fig_bar, use_container_width=True)
                    else: st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å")
                else: st.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ø (‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß, ‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ø)")

                st.markdown("---") # ‡∏Ñ‡∏±‡πà‡∏ô‡∏Å‡∏£‡∏≤‡∏ü

                # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°
                if COLUMN_NAMES_TH["RICE_VARIETY"] in df_filtered_for_display and COLUMN_NAMES_TH["TOTAL_YIELD_TON"] in df_filtered_for_display:
                    df_pie = df_filtered_for_display.groupby(COLUMN_NAMES_TH["RICE_VARIETY"], as_index=False)[COLUMN_NAMES_TH["TOTAL_YIELD_TON"]].sum()
                    df_pie = df_pie[df_pie[COLUMN_NAMES_TH["TOTAL_YIELD_TON"]] > 0]
                    if not df_pie.empty:
                        fig_pie = px.pie(df_pie, values=COLUMN_NAMES_TH["TOTAL_YIELD_TON"], names=COLUMN_NAMES_TH["RICE_VARIETY"],
                                         title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï (‡∏ï‡∏±‡∏ô) ‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß", hole=0.3, # ‡πÄ‡∏û‡∏¥‡πà‡∏° hole ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô donut chart
                                         labels={COLUMN_NAMES_TH["TOTAL_YIELD_TON"]: "‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏£‡∏ß‡∏° (‡∏ï‡∏±‡∏ô)", COLUMN_NAMES_TH["RICE_VARIETY"]: "‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß"})
                        fig_pie.update_traces(textposition='outside', textinfo='percent+label', pull=[0.05 if i==0 else 0 for i in range(len(df_pie))]) # ‡∏î‡∏∂‡∏á‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                        fig_pie.update_layout(legend_title_text='‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß')
                        st.plotly_chart(fig_pie, use_container_width=True)
                    else: st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß")
                else: st.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏ß (‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡πâ‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï)")
            else:
                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤)")

            if not df_filtered_for_display.empty:
                st.markdown("---")
                @st.cache_data
                def convert_df_to_csv_view(df_to_convert): return df_to_convert.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
                csv_dl = convert_df_to_csv_view(df_final_display); time_str = datetime.now().strftime("%Y%m%d_%H%M%S")
                st.download_button(label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ (CSV)", data=csv_dl, file_name=f"rice_data_view_{time_str}.csv", mime="text/csv", key="dl_csv_view", use_container_width=True)
